ZENITH SYSTEM - TECHNICAL ARCHITECTURAL DESIGN (TAD)

Project Name: Zenith System (The Pinnacle FFXI Enhancement Framework)
Version: 1.0 (Agile Foundation)
Date: October 24, 2025
Architectural Philosophy: Decoupled & Secure Isolation
Focus: Performance, Stability, and Modern DX (Developer Experience)

---

1. HIGH-LEVEL ARCHITECTURE
The **Zenith System** employs a multi-process, decoupled architecture to achieve maximum stability and isolate community code from the volatile FFXI client. Communication between processes is handled exclusively via high-speed Inter-Process Communication (IPC).



2. CORE COMPONENTS

2.1. FFXI Client Process (The Zenith Probe)

    * Component: **Zenith Probe** (Minimal DLL)
    * Core Language: **C++20** (provides modern concurrency features, coroutines, and superior optimization).
    * Memory Access: **Windows API** (Direct, highly optimized, low-level calls like `ReadProcessMemory`).
    * Serialization: **Protocol Buffers (Protobuf) v3** or **FlatBuffers** (Language-agnostic, efficient data schema for minimal parsing overhead).
    * IPC Endpoint: **Native Windows Named Pipes** (Robust, high-speed, asynchronous, and bidirectional communication).
    * Responsibilities: Locate critical memory pointers, serialize game state, manage the WRITE end of the IPC pipe.

2.2. External Logic Process (The Zenith Host)

    * Component: **Zenith Host**
    * Host Language: **C# 12 (.NET 8)** (Excellent cross-platform support, strong memory management, and high performance via the modern CoreCLR runtime).
    * Scripting Runtime: **Node.js (LTS Version)** or **Python 3.12+** (Chosen for asynchronous nature and vast ecosystem to host Zenith Modules).
    * IPC Client: **.NET NamedPipeClientStream** (Native, low-latency IPC client built into the .NET framework).
    * Data Handling: **Protobuf/FlatBuffers Libraries** (Ensures seamless, type-safe data ingestion from the Zenith Probe).

2.3. Graphics & User Interface (The Zenith Renderer)

    * Component: **Zenith Renderer**
    * Core Renderer: **DXGI Desktop Duplication API** & **ImGui** (DXGI for transparent overlay creation; ImGui for fast, immediate-mode GUI rendering and high refresh rates).
    * UI Framework (Launcher/Manager): **Electron / React** or **WPF (.NET)** (Used for the **Zenith Launcher**, offering a rich, modern user experience for module management and updates).
    * Responsibilities: Create a transparent, top-level window; render all custom UI (Zenith Module windows, HUD elements).

3. SECURITY & STABILITY FEATURES

    * Isolation: Game crashes are isolated to the FFXI process and will not crash the **Zenith Host**.
    * Memory Protection: The **Zenith Probe** is primarily read-only, limiting the chance of accidental memory corruption.
    * Module Sandboxing: The External Scripting Runtime should implement sandboxing (e.g., Node.js worker threads) to prevent crashing **Zenith Modules** from compromising the entire **Zenith Host** process.
